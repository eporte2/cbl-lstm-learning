{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import keras\n",
    "\n",
    "class DataGenerator(keras.utils.Sequence):\n",
    "    'Generates data for Keras'\n",
    "    def __init__(self, seqs, vocab, vocab_size, maxlen=60, batch_size=32, shuffle=False):\n",
    "        'Initialization'\n",
    "        self.seqs = seqs\n",
    "        self.vocab = vocab\n",
    "        self.maxlen = maxlen\n",
    "        self.vocab_size = vocab_size\n",
    "        self.batch_size = batch_size\n",
    "        self.shuffle = shuffle\n",
    "        self.on_epoch_end()\n",
    "\n",
    "    def __len__(self):\n",
    "        'Denotes the number of batches per epoch'\n",
    "        return int(np.floor(len(self.seqs) / self.batch_size))\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        'Generate one batch of data'\n",
    "        # Generate indexes of the batch\n",
    "        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n",
    "\n",
    "        # Find list of IDs\n",
    "        seqs_temp = [self.seqs[k] for k in indexes]\n",
    "\n",
    "        # Generate data\n",
    "        X, y = self.__data_generation(seqs_temp)\n",
    "\n",
    "        return X, y\n",
    "\n",
    "    def on_epoch_end(self):\n",
    "        'Updates indexes after each epoch'\n",
    "        self.indexes = np.arange(len(self.seqs))\n",
    "        if self.shuffle == True:\n",
    "            np.random.shuffle(self.indexes)\n",
    "            \n",
    "    def prepare_seq(self, seq):\n",
    "        # Pads seq and slides windows\n",
    "        x = []\n",
    "        y = []\n",
    "        for i, w in enumerate(seq):\n",
    "            x_padded = pad_sequences([seq[:i]],\n",
    "                                     maxlen=self.maxlen - 1,\n",
    "                                     padding='pre')[0]  # Pads before each sequence\n",
    "            x.append(x_padded)\n",
    "            y.append(w)\n",
    "        return x, y\n",
    "\n",
    "    def __data_generation(self, seqs_temp):\n",
    "        'Generates data containing batch_size samples' # X : (n_samples, *dim, n_channels)\n",
    "        # Initialization\n",
    "        x = []\n",
    "        y = []\n",
    "\n",
    "        # Slide windows over each sentence\n",
    "        for seq in seqs_temp:\n",
    "            x_windows, y_windows = self.prepare_seq(seq)\n",
    "            x += x_windows\n",
    "            y += y_windows\n",
    "\n",
    "        X = np.array(x)\n",
    "        y = keras.utils.to_categorical(y, num_classes=self.vocab_size) # One hot encoding\n",
    "\n",
    "        return X,y\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
